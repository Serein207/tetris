import { Button, VerticalBox , HorizontalBox, GridBox, ListView, LineEdit} from "std-widgets.slint";
import { Theme } from "./theme.slint";

struct Size {
    width: int,
    height: int}

struct SPiece {
    blocks: [[color]],
    is_I: bool,
    is_O: bool}

component ShadedBox inherits Rectangle {
    padding: 20px;

    background: Theme.palette.primary;

    border-radius: 10px;
    drop-shadow-blur: 20px;
    drop-shadow-color: Theme.palette.secondary;
}

component Block inherits Rectangle {
    in property <color> block_color;
    in property <length> size;

    width: size;
    height: size;
    background: block-color;
    border-width: size / 12;
    border-color: block-color.darker(0.3);
    border-radius: size / 4;
}

export global GameAdapter {
    in property <Size> grid_size;
    in property <[[color]]> grid;
    in property <SPiece> next_piece;
    in property <SPiece> held_piece;
    in property <int> score: 0;
    in property <bool> playing: false;
    in property <bool> game_over: false;

    in property <[[color]]> opponent_grid;
    in property <int> opponent_score: 0;

    in property <bool> is_multiplayer: false;
    in property <bool> room_owner_show: false;
    in property <bool> room_guest_show: false;
    in property <string> ip_address;

    callback play-pressed();
    callback search-opponent(string);
    callback create-room();
    callback cancel-listen();
}

component GridBlockDisplay inherits Rectangle {
    in property <Size> grid_size;
    in property <[[color]]> grid;
    in property <length> block_size: 28px;

    background: Theme.palette.primary;

    border-radius: 10px;
    drop-shadow-blur: 20px;
    drop-shadow-color: Theme.palette.secondary;
    VerticalLayout {
        padding: 4px;
        spacing: 2px;
        for y in grid-size.height: HorizontalLayout {
            spacing: 2px;
            for x in grid-size.width: Block {
                block-color: grid[y][x];
                size: block-size;
            }
        }
    }
}

export component PieceDisplay inherits HorizontalLayout {
    in property <SPiece> piece;

    width: 18px * 5;
    alignment: center;
    padding-top: piece.is-I ? -9px : 4px;
    GridBlockDisplay {
        grid-size: { width: piece.is-I ? 4 : piece.is-O ? 2 : 3, height: 2 };
        block-size: 18px;
        padding: 0px;
        background: transparent;
        drop-shadow-color: transparent;

        grid: piece.blocks;
    }
}

export component AppWindow inherits Window {
    default-font-size: 20px;
    callback key-pressed(string);
    forward-focus: key-handler;

    key-handler := FocusScope {
        key-pressed(event) => {
            root.key-pressed(event.text);
            return accept;
        }
    }

    background: Theme.palette.primary;
    VerticalLayout {
        padding: 12px;
        spacing: 24px;
        VerticalLayout {
            alignment: start;
            spacing: 8px;
            HorizontalLayout {
                alignment: space-around;
                Text {
                    text: "NEXT";
                    color: Theme.palette.text;
                    letter-spacing: Theme.textStyle.letter-spacing;
                }

                Text {
                    text: "HOLD";
                    color: Theme.palette.text;
                    letter-spacing: Theme.textStyle.letter-spacing;
                }

                Text {
                    text: GameAdapter.is_multiplayer ? "YOUR SCORE" : "SCORE";
                    horizontal-alignment: center;
                    horizontal-stretch: 1;
                    color: Theme.palette.text;
                    letter-spacing: Theme.textStyle.letter-spacing;
                }

                if GameAdapter.is_multiplayer: Text {
                    text: "OPPONENT SCORE";
                    horizontal-alignment: center;
                    horizontal-stretch: 1;
                    color: Theme.palette.text;
                    letter-spacing: Theme.textStyle.letter-spacing;
                }
            }

            HorizontalLayout {
                spacing: 24px;
                ShadedBox {
                    height: 62px;
                    padding: 0px;
                    horizontal-stretch: 1;
                    HorizontalLayout {
                        PieceDisplay {
                            piece: GameAdapter.next-piece;
                        }

                        PieceDisplay {
                            piece: GameAdapter.held-piece;
                        }
                    }
                }

                ShadedBox {
                    padding: 0px;
                    height: 62px;
                    Text {
                        text: GameAdapter.score;
                        color: Theme.palette.text;
                        font-size: 24px;
                        font-weight: 600;
                    }
                }

                if GameAdapter.is_multiplayer: ShadedBox {
                    height: 62px;
                    Text {
                        text: GameAdapter.opponent_score;
                        color: Theme.palette.text;
                        font-size: 24px;
                        font-weight: 600;
                    }
                }
            }
        }

        HorizontalLayout {
            spacing: GameAdapter.is_multiplayer ? 10px : 0;
            GridBlockDisplay {
                grid_size <=> GameAdapter.grid_size;
                grid <=> GameAdapter.grid;
            }

            if GameAdapter.is_multiplayer:
                GridBlockDisplay {
                grid_size <=> GameAdapter.grid_size;
                grid <=> GameAdapter.opponent_grid;
            }
        }
    }

    Rectangle {
        background: Theme.palette.primary;
        visible: !GameAdapter.playing;
        padding-top: 50px;
        VerticalLayout {
            spacing: 50px;
            padding: 20px;
            alignment: start;
            Text {
                text: "Tetris";
                color: Theme.palette.text;
                font-size: 36px;
                font-weight: 600;
                letter-spacing: Theme.textStyle.letter-spacing;
            }

            ShadedBox {
                height: 60px;
                Text {
                    text: "Singleplayer Mode";
                    font-size: 16px;
                    color: Theme.palette.text;
                }

                TouchArea {
                    clicked => {
                        GameAdapter.is_multiplayer = false;
                        GameAdapter.play-pressed();
                    }
                }
            }

            ShadedBox {
                height: 60px;

                Text {
                    text: "Multiplayer (Room Owner)";
                    font-size: 16px;
                    color: Theme.palette.text;
                }

                TouchArea {
                    clicked => {
                        GameAdapter.is_multiplayer = true;
                        GameAdapter.room_owner_show = true;
                        GameAdapter.create-room();
                    }
                }
            }

            ShadedBox {
                height: 60px;

                Text {
                    text: "Multiplayer (Room Guest)";
                    font-size: 16px;
                    color: Theme.palette.text;
                }

                TouchArea {
                    clicked => {
                        GameAdapter.is_multiplayer = true;
                        GameAdapter.room_guest_show = true;
                    }
                }
            }
        }
    }

    Rectangle {
        background: Theme.palette.primary;
        visible: GameAdapter.room_owner_show;
        padding-top: 50px;
        VerticalLayout {
            spacing: 50px;
            padding: 20px;
            alignment: start;
            HorizontalLayout {
                alignment: start;
                Button {
                    text: "Back";
                    clicked => {
                        GameAdapter.cancel-listen();
                        GameAdapter.room_owner_show = false;
                    }
                }
            }

            Text {
                text: "Wait for Guest to Join";
                color: Theme.palette.text;
                font-size: 26px;
                font-weight: 600;
            }

            Text {
                text: "Your IP Address: " + GameAdapter.ip_address;
            }
        }
    }

    Rectangle {
        background: Theme.palette.primary;
        visible: GameAdapter.room_guest_show;
        padding-top: 50px;
        VerticalLayout {
            spacing: 50px;
            padding: 20px;
            alignment: start;
            HorizontalLayout {
                alignment: start;
                Button {
                    text: "Back";
                    clicked => {
                        GameAdapter.room_guest_show = false;
                    }
                }
            }

            Text {
                text: "Join Room";
                color: Theme.palette.text;
                font-size: 36px;
                font-weight: 600;
            }

            line-edit := LineEdit {
                placeholder-text: "Opponent IP Address";
            }

            ShadedBox {
                height: 60px;

                Text {
                    text: "Join";
                    font-size: 16px;
                    color: Theme.palette.text;
                }

                TouchArea {
                    clicked => {
                        GameAdapter.search-opponent(line-edit.text);
                    }
                }
            }
        }
    }
}
